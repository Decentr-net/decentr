syntax = "proto3";
package operations;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/Decentr-net/decentr/x/operations/types";

// Msg defines the Msg service.
service Msg {
  rpc DistributeRewards(MsgDistributeRewards)
      returns (MsgDistributeRewardsResponse);
  rpc ResetAccount(MsgResetAccount) returns (MsgResetAccountResponse);
  rpc Mint(MsgMint) returns (MsgMintResponse);
  rpc Burn(MsgBurn) returns (MsgBurnResponse);
}

message Reward {
  bytes receiver = 1 [ (gogoproto.casttype) =
                           "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  cosmos.base.v1beta1.DecProto reward = 2 [ (gogoproto.nullable) = false ];
}
message MsgDistributeRewards {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  bytes owner = 1 [ (gogoproto.casttype) =
                        "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  repeated Reward rewards = 2 [ (gogoproto.nullable) = false ];
}
message MsgDistributeRewardsResponse {}

message MsgResetAccount {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  bytes owner = 1 [ (gogoproto.casttype) =
                        "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  bytes address = 2 [ (gogoproto.casttype) =
                          "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
}
message MsgResetAccountResponse {}

message MsgMint {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  bytes owner = 1 [ (gogoproto.casttype) =
                        "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  cosmos.base.v1beta1.Coin coin = 2 [ (gogoproto.nullable) = false ];
}
message MsgMintResponse {}

message MsgBurn {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  bytes owner = 1 [ (gogoproto.casttype) =
                        "github.com/cosmos/cosmos-sdk/types.AccAddress" ];
  cosmos.base.v1beta1.Coin coin = 2 [ (gogoproto.nullable) = false ];
}
message MsgBurnResponse {}