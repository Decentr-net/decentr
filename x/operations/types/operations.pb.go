// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operations/operations.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	Supervisors []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,rep,name=supervisors,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"supervisors,omitempty"`
	FixedGas    FixedGasParams                                  `protobuf:"bytes,2,opt,name=fixed_gas,json=fixedGas,proto3" json:"fixed_gas"`
	MinGasPrice types.DecCoin                                   `protobuf:"bytes,3,opt,name=min_gas_price,json=minGasPrice,proto3" json:"min_gas_price"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_07148eb1bb237ba9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSupervisors() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Supervisors
	}
	return nil
}

func (m *Params) GetFixedGas() FixedGasParams {
	if m != nil {
		return m.FixedGas
	}
	return FixedGasParams{}
}

func (m *Params) GetMinGasPrice() types.DecCoin {
	if m != nil {
		return m.MinGasPrice
	}
	return types.DecCoin{}
}

type FixedGasParams struct {
	ResetAccount      uint64 `protobuf:"varint,1,opt,name=reset_account,json=resetAccount,proto3" json:"reset_account,omitempty"`
	BanAccount        uint64 `protobuf:"varint,2,opt,name=ban_account,json=banAccount,proto3" json:"ban_account,omitempty"`
	DistributeRewards uint64 `protobuf:"varint,3,opt,name=distribute_rewards,json=distributeRewards,proto3" json:"distribute_rewards,omitempty"`
}

func (m *FixedGasParams) Reset()         { *m = FixedGasParams{} }
func (m *FixedGasParams) String() string { return proto.CompactTextString(m) }
func (*FixedGasParams) ProtoMessage()    {}
func (*FixedGasParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_07148eb1bb237ba9, []int{1}
}
func (m *FixedGasParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedGasParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedGasParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedGasParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedGasParams.Merge(m, src)
}
func (m *FixedGasParams) XXX_Size() int {
	return m.Size()
}
func (m *FixedGasParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedGasParams.DiscardUnknown(m)
}

var xxx_messageInfo_FixedGasParams proto.InternalMessageInfo

func (m *FixedGasParams) GetResetAccount() uint64 {
	if m != nil {
		return m.ResetAccount
	}
	return 0
}

func (m *FixedGasParams) GetBanAccount() uint64 {
	if m != nil {
		return m.BanAccount
	}
	return 0
}

func (m *FixedGasParams) GetDistributeRewards() uint64 {
	if m != nil {
		return m.DistributeRewards
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "operations.Params")
	proto.RegisterType((*FixedGasParams)(nil), "operations.FixedGasParams")
}

func init() { proto.RegisterFile("operations/operations.proto", fileDescriptor_07148eb1bb237ba9) }

var fileDescriptor_07148eb1bb237ba9 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0xb1, 0x8e, 0xd4, 0x30,
	0x10, 0x8d, 0xef, 0x56, 0x27, 0x70, 0xee, 0x90, 0x88, 0x28, 0xa2, 0x05, 0x65, 0x57, 0x47, 0xb3,
	0x4d, 0x6c, 0x05, 0x6a, 0x8a, 0x5d, 0x4e, 0x47, 0x41, 0x83, 0x42, 0x47, 0x13, 0x39, 0xce, 0x5c,
	0xb0, 0x50, 0xec, 0xc8, 0xe3, 0x1c, 0xc7, 0x07, 0xd0, 0xf3, 0x59, 0x57, 0x6e, 0x49, 0xb5, 0x42,
	0xbb, 0x7c, 0x05, 0x15, 0x4a, 0x1c, 0xd8, 0x5c, 0xe5, 0xd1, 0x7b, 0x6f, 0x9e, 0xe7, 0xcd, 0xd0,
	0xe7, 0xa6, 0x05, 0x2b, 0x9c, 0x32, 0x1a, 0xf9, 0xb1, 0x64, 0xad, 0x35, 0xce, 0x44, 0xf4, 0x88,
	0xcc, 0x9f, 0xd5, 0xa6, 0x36, 0x03, 0xcc, 0xfb, 0xca, 0x2b, 0xe6, 0x89, 0x34, 0xd8, 0x18, 0xe4,
	0xa5, 0x40, 0xe0, 0xb7, 0x59, 0x09, 0x4e, 0x64, 0x5c, 0x1a, 0xa5, 0x3d, 0x7f, 0xf9, 0x9b, 0xd0,
	0xb3, 0x0f, 0xc2, 0x8a, 0x06, 0xa3, 0x8f, 0x34, 0xc4, 0xae, 0x05, 0x7b, 0xab, 0xd0, 0x58, 0x8c,
	0xc9, 0xf2, 0x74, 0x75, 0xbe, 0xc9, 0xfe, 0xec, 0x16, 0x69, 0xad, 0xdc, 0xe7, 0xae, 0x64, 0xd2,
	0x34, 0x7c, 0xb4, 0xf3, 0x4f, 0x8a, 0xd5, 0x17, 0xee, 0xbe, 0xb5, 0x80, 0x6c, 0x2d, 0xe5, 0xba,
	0xaa, 0x2c, 0x20, 0xe6, 0x53, 0x97, 0xe8, 0x0d, 0x7d, 0x7c, 0xa3, 0xee, 0xa0, 0x2a, 0x6a, 0x81,
	0xf1, 0xc9, 0x92, 0xac, 0xc2, 0x57, 0x73, 0x36, 0xc9, 0x71, 0xdd, 0x93, 0xef, 0x04, 0xfa, 0x19,
	0x36, 0xb3, 0xfb, 0xdd, 0x22, 0xc8, 0x1f, 0xdd, 0x8c, 0x68, 0x74, 0x4d, 0x2f, 0x1a, 0xa5, 0xfb,
	0xe6, 0xa2, 0xb5, 0x4a, 0x42, 0x7c, 0x3a, 0x58, 0xbc, 0x60, 0x7e, 0x00, 0xd6, 0xc7, 0x62, 0x63,
	0x2c, 0x76, 0x05, 0xf2, 0xad, 0x51, 0x7a, 0x34, 0x09, 0x1b, 0xa5, 0x7b, 0xe3, 0xbe, 0xed, 0xf2,
	0x3b, 0xa1, 0x4f, 0x1e, 0x7e, 0x15, 0xbd, 0xa4, 0x17, 0x16, 0x10, 0x5c, 0x21, 0xa4, 0x34, 0x9d,
	0x76, 0x31, 0x59, 0x92, 0xd5, 0x2c, 0x3f, 0x1f, 0xc0, 0xb5, 0xc7, 0xa2, 0x05, 0x0d, 0x4b, 0xa1,
	0xff, 0x4b, 0x4e, 0x06, 0x09, 0x2d, 0x85, 0xfe, 0x27, 0x48, 0x69, 0x54, 0x29, 0x74, 0x56, 0x95,
	0x9d, 0x83, 0xc2, 0xc2, 0x57, 0x61, 0x2b, 0x1c, 0xa6, 0x9c, 0xe5, 0x4f, 0x8f, 0x4c, 0xee, 0x89,
	0xcd, 0xfb, 0xfb, 0x7d, 0x42, 0xb6, 0xfb, 0x84, 0xfc, 0xda, 0x27, 0xe4, 0xc7, 0x21, 0x09, 0xb6,
	0x87, 0x24, 0xf8, 0x79, 0x48, 0x82, 0x4f, 0xd9, 0x64, 0xc9, 0x57, 0x20, 0x41, 0x3b, 0x9b, 0x6a,
	0x70, 0xbc, 0xf2, 0x35, 0xbf, 0x9b, 0x5c, 0xdf, 0xef, 0xbc, 0x3c, 0x1b, 0x4e, 0xf8, 0xfa, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x55, 0x63, 0x37, 0x23, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinGasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOperations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.FixedGas.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOperations(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Supervisors) > 0 {
		for iNdEx := len(m.Supervisors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Supervisors[iNdEx])
			copy(dAtA[i:], m.Supervisors[iNdEx])
			i = encodeVarintOperations(dAtA, i, uint64(len(m.Supervisors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FixedGasParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedGasParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedGasParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DistributeRewards != 0 {
		i = encodeVarintOperations(dAtA, i, uint64(m.DistributeRewards))
		i--
		dAtA[i] = 0x18
	}
	if m.BanAccount != 0 {
		i = encodeVarintOperations(dAtA, i, uint64(m.BanAccount))
		i--
		dAtA[i] = 0x10
	}
	if m.ResetAccount != 0 {
		i = encodeVarintOperations(dAtA, i, uint64(m.ResetAccount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOperations(dAtA []byte, offset int, v uint64) int {
	offset -= sovOperations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Supervisors) > 0 {
		for _, b := range m.Supervisors {
			l = len(b)
			n += 1 + l + sovOperations(uint64(l))
		}
	}
	l = m.FixedGas.Size()
	n += 1 + l + sovOperations(uint64(l))
	l = m.MinGasPrice.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func (m *FixedGasParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResetAccount != 0 {
		n += 1 + sovOperations(uint64(m.ResetAccount))
	}
	if m.BanAccount != 0 {
		n += 1 + sovOperations(uint64(m.BanAccount))
	}
	if m.DistributeRewards != 0 {
		n += 1 + sovOperations(uint64(m.DistributeRewards))
	}
	return n
}

func sovOperations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOperations(x uint64) (n int) {
	return sovOperations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supervisors", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supervisors = append(m.Supervisors, make([]byte, postIndex-iNdEx))
			copy(m.Supervisors[len(m.Supervisors)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedGas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixedGas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedGasParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedGasParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedGasParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetAccount", wireType)
			}
			m.ResetAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetAccount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanAccount", wireType)
			}
			m.BanAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanAccount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeRewards", wireType)
			}
			m.DistributeRewards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistributeRewards |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOperations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOperations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOperations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOperations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOperations = fmt.Errorf("proto: unexpected end of group")
)
